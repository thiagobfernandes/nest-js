import * as Joi from 'joi';
export declare type JoiValidationGroup = string | symbol;
export declare const DEFAULT: JoiValidationGroup;
export interface Constructor<T = any> extends Function {
    new (...args: unknown[]): T;
}
export declare const OPTIONS_PROTO_KEY: unique symbol;
export declare const CUSTOMIZER_PROTO_KEY: unique symbol;
export declare type ObjectSchemaCustomizerFn = (schema: Joi.ObjectSchema) => Joi.ObjectSchema;
export declare type ClassOptionsMetadata = Map<string | symbol, Joi.ValidationOptions>;
export declare type ClassCustomizerMetadata = Map<string | symbol, ObjectSchemaCustomizerFn>;
export declare const SCHEMA_PROTO_KEY: unique symbol;
export declare const SCHEMA_PROP_KEY: unique symbol;
export declare type SchemaCustomizerFn = (schema: Joi.Schema) => Joi.Schema;
export declare type PropertySchemaMetadata = Map<string | symbol, {
    schemaOrType: Joi.Schema | Constructor | Constructor[];
    schemaFn?: SchemaCustomizerFn;
    schemaArrayFn?: SchemaCustomizerFn | null;
}>;
export declare const EXTENDS_PROTO_KEY: unique symbol;
