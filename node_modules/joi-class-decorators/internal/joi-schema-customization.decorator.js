"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JoiSchemaCustomization = void 0;
require("reflect-metadata");
const defs_1 = require("./defs");
const helpers_1 = require("./helpers");
function JoiSchemaCustomization(...args) {
    let customizeSchemaFn;
    let groups = [];
    if (helpers_1.argIsSchemaCustomizerFn(args[0])) {
        customizeSchemaFn = args[0];
    }
    else if (helpers_1.argIsJoiValidationGroups(args[0]) && helpers_1.argIsSchemaCustomizerFn(args[1])) {
        groups = args[0];
        customizeSchemaFn = args[1];
    }
    else {
        throw new Error('Invalid arguments.');
    }
    return function (target) {
        const optionsMeta = Reflect.getOwnMetadata(defs_1.CUSTOMIZER_PROTO_KEY, target) || new Map();
        const finalGroups = groups.length ? groups : [defs_1.DEFAULT];
        for (const group of finalGroups) {
            if (optionsMeta.has(group)) {
                throw new Error(`Cannot redefine schema customization function for group ${String(group)} on ${target.constructor.name}`);
            }
            optionsMeta.set(group, customizeSchemaFn);
        }
        Reflect.defineMetadata(defs_1.CUSTOMIZER_PROTO_KEY, optionsMeta, target);
    };
}
exports.JoiSchemaCustomization = JoiSchemaCustomization;
